#Использовать "."
#Использовать logos
#Использовать fs
#Использовать cmdline

Перем ВозможныеКоманды;
Перем Лог;

Процедура ИнициализацияОкружения()

	Лог = Исходники.ПолучитьЛог();
	
	ПарсерАргументовКоманднойСтроки = Новый ПарсерАргументовКоманднойСтроки();

	Исходники.УстановитьПараметрыСборкиРазборкиДляКоманднойСтроки(ПарсерАргументовКоманднойСтроки);

	ПарсерАргументовКоманднойСтроки.ДобавитьИменованныйПараметр("--cachekey", "Ключ изменения файлов из build/cache.txt", Истина);

	ПарсерАргументовКоманднойСтроки.ДобавитьПараметр("Каталог", 
		"Каталог, где находятся исходники для сборки бинарных файлов (epf,erf)");
	ПарсерАргументовКоманднойСтроки.ДобавитьИменованныйПараметр(Исходники.КлючКаталогБинарныхФайлов(), "Каталог сборки исходников");
	
	Аргументы = ПарсерАргументовКоманднойСтроки.Разобрать(АргументыКоманднойСтроки);
	
	КлючКэшаИзмененияФайлов = Аргументы["--cachekey"];
	Лог.Отладка("Получили ключ кэша измененных файлов <%1>", "" + КлючКэшаИзмененияФайлов);
	
	ОдинКаталогИлиФайл = Аргументы["Каталог"];
	Лог.Отладка("Получили каталог/файл для сборки %1", "" + ОдинКаталогИлиФайл);

	ОписаниеСборкиРазборки = Исходники.ОписаниеСборкиРазборки(Аргументы, Лог);
	ПодкаталогСборки = ОписаниеСборкиРазборки.ПутьКаталогаСборки;
	// ПодкаталогСборки = ?(Бинарники1СХранятсяРядомСИсходниками, "", ПутьКаталогаСборки + "/");
	
	Если Не ПустаяСтрока(ОдинКаталогИлиФайл) Тогда
		
		МассивПутей = Новый Массив();
		МассивПутей.Добавить(ОдинКаталогИлиФайл);

	Иначе
		
		МассивПутей = Исходники.ПапкиВнешнихФайлов();
		
	КонецЕсли;

	КаталогПроекта = Исходники.КаталогПроекта();
	ШаблонЗапуска = "oscript ./tools/runner.os decompileepf %1 %2 --ibname /F./build/ibservice";

	КаталогСоответствующийКорню = Исходники.КаталогСоответствующийКорню();

	Для каждого Элемент из МассивПутей Цикл
		ОтносительныйПуть = ФС.ОтносительныйПуть(КаталогПроекта, Элемент);
		Лог.Отладка("Относительный путь %1", ОтносительныйПуть);

	КаталогСоответствующийКорню = Исходники.КаталогСоответствующийКорню();
		Если ОтносительныйПуть = КаталогСоответствующийКорню Тогда
			КудаРазбираем = КаталогСоответствующийКорню;

			ЧтоРазбираем = СтрШаблон("./%1%2", ПодкаталогСборки, "bddRunner.epf");
			ПроверитьСуществованиеФайла(ЧтоРазбираем);

			СтрокаЗапуска = СтрШаблон(ШаблонЗапуска, ЧтоРазбираем, КудаРазбираем);
			Исходники.ИсполнитьКоманду(СтрокаЗапуска);
				
			ЧтоРазбираем = СтрШаблон("./%1%2", ПодкаталогСборки, "xddTestRunner.epf");
			ПроверитьСуществованиеФайла(ЧтоРазбираем);
			
		Иначе
			ФайлЭлемента = Новый Файл(Элемент);
			Если ФайлЭлемента.Расширение = ".epf" Тогда
				Лог.Отладка("Определили внешний файл %1", Элемент);
				
				ОтносительныйПутьКаталога = ФС.ОтносительныйПуть(КаталогПроекта, ФайлЭлемента.Путь);
				Лог.Отладка("Относительный путь каталога файла %1", ОтносительныйПутьКаталога);

				ЧтоРазбираем = СтрШаблон("./%1%2", ПодкаталогСборки, ОтносительныйПуть);
				Если ОтносительныйПутьКаталога = "." Тогда
					КудаРазбираем = КаталогСоответствующийКорню;
				Иначе
					КудаРазбираем = СтрЗаменить(ОтносительныйПуть, ".epf", "");
				КонецЕсли;
			Иначе
				ЧтоРазбираем = СтрШаблон("./%1%2", ПодкаталогСборки, Элемент);
				КудаРазбираем = Элемент;
			КонецЕсли;
		КонецЕсли;

		ПроверитьСуществованиеФайла(ЧтоРазбираем);

		СтрокаЗапуска = СтрШаблон(ШаблонЗапуска, ЧтоРазбираем, КудаРазбираем);
		Если ЗначениеЗаполнено(КлючКэшаИзмененияФайлов) Тогда
			ШаблонЗапуска = СтрШаблон("%1 --cachekey %2", ШаблонЗапуска, КлючКэшаИзмененияФайлов);
		КонецЕсли;
		
		Исходники.ИсполнитьКоманду(СтрокаЗапуска);
	КонецЦикла;

	УдалитьИзИзмененийГита_БинарныеФайлыТолстыхФорм_ЕслиВМодулеФормыНеБылоИзменений();
	
КонецПроцедуры

Процедура ПроверитьСуществованиеФайла(Знач Путь, Знач СообщениеОшибки = "")
	Файл = Новый Файл(Путь);
	Ожидаем.Что(Файл.Существует(), СтрШаблон("Файл не существует %1
		|%2", Путь, СообщениеОшибки)).Равно(Истина);	
КонецПроцедуры

Процедура УдалитьИзИзмененийГита_БинарныеФайлыТолстыхФорм_ЕслиВМодулеФормыНеБылоИзменений()
	СтрокаЗапуска = "git diff --name-status HEAD";
	ЖурналИзмененийГит = Исходники.ИсполнитьКоманду(СтрокаЗапуска, "UTF-8");

	МассивИмен = Новый Массив;
	МассивСтрокЖурнала = СтрРазделить(ЖурналИзмененийГит, Символы.ПС);
	Для Каждого СтрокаЖурнала Из МассивСтрокЖурнала Цикл
		Лог.Отладка("	<%1>", СтрокаЖурнала);
		СтрокаЖурнала = СокрЛ(СтрокаЖурнала);
		СимволИзменений = Лев(СтрокаЖурнала, 1);
		Если СимволИзменений = "M" Тогда
			ИмяФайла = СокрЛП(Сред(СтрокаЖурнала, 2));
			МассивИмен.Добавить(ИмяФайла);
			Лог.Отладка("		В журнале git найдено имя файла <%1>", ИмяФайла);
		КонецЕсли;
	КонецЦикла;

	Для каждого Элемент из МассивИмен Цикл
		Если Прав(Элемент, 8) = "Form.bin" Тогда
			ЧастьПути = Лев(Элемент, СтрДлина(Элемент)-8);
			Лог.Информация(ЧастьПути);
			ПутьМодуляФормы = ЧастьПути + "Form/Module.bsl";
			Если СтрНайти(ЖурналИзмененийГит, ПутьМодуляФормы) = 0 Тогда
				Исходники.ИсполнитьКоманду("git checkout -- " + Элемент, "UTF-8");
				Приостановить(2000);
				
				Исходники.ИсполнитьКоманду("git checkout -- " + ЧастьПути, "UTF-8");
				Приостановить(2000);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

ИнициализацияОкружения();
